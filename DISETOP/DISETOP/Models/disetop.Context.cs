//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DISETOP.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DISETOPEntities : DbContext
    {
        public DISETOPEntities()
            : base("name=DISETOPEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ACTIVO> ACTIVOS { get; set; }
        public virtual DbSet<CATEGORIA_PROYECTOS> CATEGORIA_PROYECTOS { get; set; }
        public virtual DbSet<COSTO_PROYECTOS> COSTO_PROYECTOS { get; set; }
        public virtual DbSet<EMPLEADO> EMPLEADOS { get; set; }
        public virtual DbSet<PAGO> PAGOS { get; set; }
        public virtual DbSet<PROYECTO> PROYECTOS { get; set; }
        public virtual DbSet<USUARIO> USUARIOS { get; set; }
    
        public virtual int sp_ActualizaEmpleados(string codigo_empleado, Nullable<int> cedula, string nombre_empleado, Nullable<int> telefono, string correo, string direccion, string comentario)
        {
            var codigo_empleadoParameter = codigo_empleado != null ?
                new ObjectParameter("codigo_empleado", codigo_empleado) :
                new ObjectParameter("codigo_empleado", typeof(string));
    
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(int));
    
            var nombre_empleadoParameter = nombre_empleado != null ?
                new ObjectParameter("nombre_empleado", nombre_empleado) :
                new ObjectParameter("nombre_empleado", typeof(string));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(int));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var comentarioParameter = comentario != null ?
                new ObjectParameter("comentario", comentario) :
                new ObjectParameter("comentario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ActualizaEmpleados", codigo_empleadoParameter, cedulaParameter, nombre_empleadoParameter, telefonoParameter, correoParameter, direccionParameter, comentarioParameter);
        }
    
        public virtual int sp_EliminaEmpleados(string codigo_empleado)
        {
            var codigo_empleadoParameter = codigo_empleado != null ?
                new ObjectParameter("codigo_empleado", codigo_empleado) :
                new ObjectParameter("codigo_empleado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EliminaEmpleados", codigo_empleadoParameter);
        }
    
        public virtual int sp_InsertaEmpleados(string codigo_empleado, Nullable<int> cedula, string nombre_empleado, Nullable<int> telefono, string correo, string direccion, string comentario)
        {
            var codigo_empleadoParameter = codigo_empleado != null ?
                new ObjectParameter("codigo_empleado", codigo_empleado) :
                new ObjectParameter("codigo_empleado", typeof(string));
    
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(int));
    
            var nombre_empleadoParameter = nombre_empleado != null ?
                new ObjectParameter("nombre_empleado", nombre_empleado) :
                new ObjectParameter("nombre_empleado", typeof(string));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(int));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var comentarioParameter = comentario != null ?
                new ObjectParameter("comentario", comentario) :
                new ObjectParameter("comentario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertaEmpleados", codigo_empleadoParameter, cedulaParameter, nombre_empleadoParameter, telefonoParameter, correoParameter, direccionParameter, comentarioParameter);
        }
    
        public virtual ObjectResult<sp_RetornaEmpleados_Result> sp_RetornaEmpleados()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RetornaEmpleados_Result>("sp_RetornaEmpleados");
        }
    
        public virtual ObjectResult<sp_RetornaEmpleadosPorID_Result> sp_RetornaEmpleadosPorID(string codigo_empleado)
        {
            var codigo_empleadoParameter = codigo_empleado != null ?
                new ObjectParameter("codigo_empleado", codigo_empleado) :
                new ObjectParameter("codigo_empleado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RetornaEmpleadosPorID_Result>("sp_RetornaEmpleadosPorID", codigo_empleadoParameter);
        }
    
        public virtual int sp_InsertaOactualizaEmpleado(string codigo_empleado, Nullable<int> cedula, string nombre_empleado, Nullable<int> telefono, string correo, string direccion, string comentario)
        {
            var codigo_empleadoParameter = codigo_empleado != null ?
                new ObjectParameter("codigo_empleado", codigo_empleado) :
                new ObjectParameter("codigo_empleado", typeof(string));
    
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(int));
    
            var nombre_empleadoParameter = nombre_empleado != null ?
                new ObjectParameter("nombre_empleado", nombre_empleado) :
                new ObjectParameter("nombre_empleado", typeof(string));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(int));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var comentarioParameter = comentario != null ?
                new ObjectParameter("comentario", comentario) :
                new ObjectParameter("comentario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertaOactualizaEmpleado", codigo_empleadoParameter, cedulaParameter, nombre_empleadoParameter, telefonoParameter, correoParameter, direccionParameter, comentarioParameter);
        }
    
        public virtual int sp_RegistrarUsuario(string usuario, string contrasena, ObjectParameter registrado, ObjectParameter mensaje)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RegistrarUsuario", usuarioParameter, contrasenaParameter, registrado, mensaje);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ValidarUsuario(string usuario, string contrasena)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ValidarUsuario", usuarioParameter, contrasenaParameter);
        }
    }
}
